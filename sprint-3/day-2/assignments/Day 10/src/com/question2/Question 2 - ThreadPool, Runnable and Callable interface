Q2/ What is a ThreadPool, how to create a thread pool of 4 threads, and write down the
difference between the Callable and Runnable interface.

Answer-

		Runnable task = () -> System.out.println("Hello");
		Thread thread = new Thread( task );
		thread.start();
		
--after complition of this one task thread will die and thread is an expensive resourse.
--we can improve this process by creating a ThreadPool
--ThreadPool is a pool of already created threads ready to do out tasks.
--Without ThreadPool, if we have 10 different independent tasks are there then we need
to create 10 spear threads.
--but we can make pool of 4 threads to do this. 
--here single thread performs multiple tasks.

--create task to do
		PrintJob[] tasks = {
				new PrintJob("Ram");
				new PrintJob("Shyam");
				new PrintJob("Ravi");
				new PrintJob("Anil");
						|
						|
					(total 10 tasks)

--we can create ThreadPool as follows-
		ExecutorService service = Executors.newFixedThreadPool(4);
		
--After creating pool, need to submit tasks to this pool.
	for(PrintJob task = tasks){
		service.submit( task );
	}
	
--after executorService need to shutdown service like-
		service.shutdown();
		
-------------------------------------------------------------------------------------

Difference between Runnable and Callable interface-

Runnable-
1.If a thread won't returns anything. 
2.only one method public void run()
3.return type void 
4.if any exception raise compulsory we need to handle within try catch.
5.Belongs to java.lang package
6.from java 1.0 version

Callable-
1.If a Thread returns anything
2.only one method public Object call() throws Exception
3.return type is Object
4.not required to use try-catch
5.Belongs to java.util.concurrent package
6.from java 1.5 version

-------------------------------------------------------------------------------------
























		
